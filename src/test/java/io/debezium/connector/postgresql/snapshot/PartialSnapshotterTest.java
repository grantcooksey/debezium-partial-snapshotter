/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.debezium.connector.postgresql.snapshot;

import io.debezium.connector.postgresql.TestPostgresConnectorConfig;
import org.apache.kafka.connect.data.Struct;
import org.apache.kafka.connect.source.SourceRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class PartialSnapshotterTest {

    private static final String CLEAN_UP_SCHEMA = "DROP SCHEMA IF EXISTS public CASCADE;" +
        "CREATE SCHEMA public;";
    private static final String CREATE_TEST_DATA_TABLE = "create table test_data (" +
            "id integer not null constraint table_name_pk primary key," +
            "name text);";

    // Test for JMX metrics thread dies when snapshot is finished
    // Test working with filter on a live table
    // No tables to monitor test

    @Before
    public void before() {
        TestUtils.execute(CLEAN_UP_SCHEMA);
    }

    @After
    public void after() {
        TestUtils.execute(CLEAN_UP_SCHEMA);
    }

    @Test
    public void testEngine() throws InterruptedException {
        TestUtils.execute(CREATE_TEST_DATA_TABLE, "insert into test_data (id, name) VALUES (1, 'joe');");
        TestPostgresEmbeddedEngine engine = new TestPostgresEmbeddedEngine();
        ChangeConsumer consumer = new ChangeConsumer();
        engine.start(consumer);
        waitForSnapshotToBeCompleted();

        SourceRecord record = consumer.pollDataTopic();
        assertNotNull(record);
        assertEquals(record.topic(), TestPostgresConnectorConfig.TEST_SERVER + ".public.test_data");
        assertEquals(((Struct) record.value()).getStruct("after").get("id"), 1);
        assertEquals(((Struct) record.value()).getStruct("after").get("name"), "joe");

        engine.stop();
    }

    @Test
    public void testJMXThreadShutsDownAfterSnapshot() {

    }

    private void waitForStreamingRunning() throws InterruptedException {
        TestUtils.waitForStreamingRunning("postgres", TestPostgresConnectorConfig.TEST_SERVER);
    }

    private void waitForSnapshotToBeCompleted() throws InterruptedException {
        TestUtils.waitForSnapshotToBeCompleted("postgres", TestPostgresConnectorConfig.TEST_SERVER);
    }
}
